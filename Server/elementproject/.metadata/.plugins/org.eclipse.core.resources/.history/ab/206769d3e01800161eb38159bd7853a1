package io.element.gtserver;

import java.util.Calendar;

import org.apache.log4j.PropertyConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;



import io.element.server.impl.NettyTCPServer;


public class App 
{	
	public static  ApplicationContext context = null;
	
	public static final Logger LOGGER =  LoggerFactory.getLogger(App.class);
	
    public static void main( String[] args ) throws Exception
    {    	    	
    	PropertyConfigurator.configure("log4j.properties");
    	
        App.context = 
        		new AnnotationConfigApplicationContext(GT_ServerSpringConfig.class);
        LOGGER.info("GATE -- Loading java bean resources completed!!!");
        
        
        GT_Managers.getInstance().init();
        LOGGER.info("GATE -- Loading Game Managers for initialize completed!!!!");
        
		NettyTCPServer server = (NettyTCPServer) App.context.getBean("tcpServer");
        try {
			server.startServer();
			LOGGER.info("GATE -- TCP Server start success!");
		} catch (Exception e1) {
			LOGGER.error("GATE -- TCP Server start error {}, going to shut down", e1);
			return;
		}
        
        long tCurrentTime = Calendar.getInstance().getTimeInMillis();
        while (true)
        {
        	if( server.isClosed() )
        		break;
        	
        	long tDeltaTime = Calendar.getInstance().getTimeInMillis() - tCurrentTime;
        	GT_Managers.getInstance().OnTick(tDeltaTime);
        	tCurrentTime = Calendar.getInstance().getTimeInMillis();
        	
        	
        }
        
        
//        int index = 10000;
//        int playersnum = 4;
//        int roomindex  = 20000;
//             
//        List<BasePlayer> players = new ArrayList<BasePlayer>();
//        for (int i = 0; i < playersnum; i++) {
//        	BasePlayer player = new BasePlayer(null);
//        	player.SetPlayerGuid(index++);
//        	player.SetLocation(index % playersnum);
//        	player.SetPlayerName("player:" + new Integer(index).toString());
//        	players.add(player);
//		}
//        
//        SessionRoom room = new SessionRoom(roomindex,"room:"+new Integer(roomindex).toString(),ROOM_TYPE.LOGIN_ROOMTYPE_SIMPLE_2V2);
//        for (int i = 0; i < players.size(); i++) {
//			room.addPlayer(players.get(i));
//		}
//
//        Handler handler = room.steering().ReflectHandler( LoginProto.G2S_MSGTYPE.G2S_REQUEST_CREATE_NEWROOM);
//        room.steering().connect(handler);
//        		
//        while(true)
//        {
//        	Thread.sleep(500);
//        }
    }
}
