package io.element.gmserver_test;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.PropertyConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import io.element.communication.SSConfig;
import io.element.communication.ServerSteering;
import io.element.communication.impl.ServerSession;
import io.element.player.BasePlayer;
import io.element.protobuf.LoginProto;
import io.element.protobuf.LoginProto.ROOM_TYPE;
import io.element.reflect.Handler;
import io.element.room.impl.SessionRoom;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.protobuf.ProtobufEncoder;
import io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;
import io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;

public class App 
{	
	public static  ApplicationContext context = null;
	
	public static final Logger LOGGER =  LoggerFactory.getLogger(App.class);
	
    public static void main( String[] args ) throws Exception
    {
    	System.out.println("hello world");
    	
    	PropertyConfigurator.configure("log4j.properties");
    	
        App.context = 
        		new AnnotationConfigApplicationContext(GT_ServerSpringConfig.class);
        
        GT_Managers.getInstance().init();
                
        int index = 10000;
        int playersnum = 4;
        int roomindex = 20000;
             
        List<BasePlayer> players = new ArrayList<BasePlayer>();
        for (int i = 0; i < playersnum; i++) {
        	BasePlayer player = new BasePlayer(null);
        	player.SetPlayerGuid(index++);
        	player.SetLocation(index % playersnum);
        	player.SetPlayerName("player:" + new Integer(index).toString());
        	players.add(player);
		}
        
        SessionRoom room = new SessionRoom(roomindex,"room:"+new Integer(roomindex).toString(),ROOM_TYPE.LOGIN_ROOMTYPE_SIMPLE_2V2);
        for (int i = 0; i < players.size(); i++) {
			room.addPlayer(players.get(i));
		}

        Handler handler = room.steering().ReflectHandler( LoginProto.G2S_MSGTYPE.G2S_REQUEST_CREATE_NEWROOM);
        room.steering().connect(handler);
        		
    }
}
